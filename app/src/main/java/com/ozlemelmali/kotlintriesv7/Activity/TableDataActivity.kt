package com.ozlemelmali.kotlintriesv7.Activity

import android.graphics.Color
import android.graphics.Typeface
import android.os.Bundle
import android.util.Log
import android.view.Gravity
import android.view.View
import android.view.ViewGroup
import android.widget.ProgressBar
import android.widget.TableLayout
import android.widget.TableRow
import android.widget.TextView
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView

import com.ozlemelmali.kotlintriesv7.Adapter.TableDataAdapter
import com.ozlemelmali.kotlintriesv7.Adapter.TableHeaderAdapter
import com.ozlemelmali.kotlintriesv7.Data.ColumnResponse
import com.ozlemelmali.kotlintriesv7.R
import com.ozlemelmali.kotlintriesv7.Data.TableDataResponse
import com.ozlemelmali.kotlintriesv7.RetrofitClient
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response

class TableDataActivity : AppCompatActivity() {

    private lateinit var recyclerViewHeader: RecyclerView
    private lateinit var recyclerViewData: RecyclerView
    private lateinit var progressBar: ProgressBar
    private lateinit var tableHeader: TableLayout
    private lateinit var tableName: String
    private lateinit var tableHeaderAdapter: TableHeaderAdapter
    private lateinit var tableDataAdapter: TableDataAdapter

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_table_data)

        recyclerViewHeader = findViewById(R.id.recyclerViewHeader)
        recyclerViewData = findViewById(R.id.recyclerViewData)
        progressBar = findViewById(R.id.progressBar)
        tableHeader = findViewById(R.id.tableHeader)
        // LayoutManager ve Adapter'larÄ± ayarlÄ±yoruz
        recyclerViewHeader.layoutManager = LinearLayoutManager(this, LinearLayoutManager.HORIZONTAL, false)
        recyclerViewData.layoutManager = LinearLayoutManager(this)

        tableHeaderAdapter = TableHeaderAdapter(emptyList()) // BaÅŸlangÄ±Ã§ta boÅŸ bir liste
        tableDataAdapter = TableDataAdapter(emptyList(), emptyList())

        recyclerViewHeader.adapter = tableHeaderAdapter
        recyclerViewData.adapter = tableDataAdapter

        // Intent ile gelen tablo ismini al
        tableName = intent.getStringExtra("table_name") ?: return

        // API'den sÃ¼tun baÅŸlÄ±klarÄ±nÄ± Ã§ek

        fetchTableColumns()

    }

    private fun fetchTableColumns() {
        progressBar.visibility = View.VISIBLE

        // Retrofit ile API Ã§aÄŸrÄ±sÄ±
        val call = RetrofitClient.instance.getTableColumns(tableName)

        call.enqueue(object : Callback<ColumnResponse> {
            override fun onResponse(call: Call<ColumnResponse>, response: Response<ColumnResponse>) {
                if (response.isSuccessful) {
                    val columns = response.body()?.columns ?: emptyList()

                    Log.d("API_RESPONSE", "Gelen sÃ¼tun isimleri: $columns") // Log ekleyelim

                    if (columns.isNotEmpty()) {
                        fetchTableData(columns)
                        setupTableHeader(columns)  // ðŸ“Œ Burada baÅŸlÄ±klarÄ± oluÅŸturuyoruz.
                    } else {
                        Log.e("TABLE_ERROR", "API sÃ¼tunlarÄ± boÅŸ dÃ¶ndÃ¼!")
                        Toast.makeText(this@TableDataActivity, "SÃ¼tun bilgileri boÅŸ!", Toast.LENGTH_SHORT).show()
                    }
                } else {
                    Toast.makeText(this@TableDataActivity, "SÃ¼tun bilgileri alÄ±namadÄ±!", Toast.LENGTH_SHORT).show()
                }
            }


            override fun onFailure(call: Call<ColumnResponse>, t: Throwable) {
                progressBar.visibility = View.GONE
                Toast.makeText(this@TableDataActivity, "BaÄŸlantÄ± hatasÄ±!", Toast.LENGTH_SHORT).show()
            }
        })
    }

    private fun fetchTableData(columns: List<String>) {
        progressBar.visibility = View.VISIBLE

        // Verileri Ã§ekmek iÃ§in API Ã§aÄŸrÄ±sÄ±
        val call = RetrofitClient.instance.getTableData(tableName)

        call.enqueue(object : Callback<TableDataResponse> {
            override fun onResponse(call: Call<TableDataResponse>, response: Response<TableDataResponse>) {
                progressBar.visibility = View.GONE
                if (response.isSuccessful) {
                    val data = response.body()?.data ?: emptyList()
                    tableHeaderAdapter.updateColumns(columns)
                    tableDataAdapter.updateData(columns, data)
                } else {
                    Toast.makeText(this@TableDataActivity, "Tablo verileri alÄ±namadÄ±!", Toast.LENGTH_SHORT).show()
                }
            }

            override fun onFailure(call: Call<TableDataResponse>, t: Throwable) {
                progressBar.visibility = View.GONE
                Toast.makeText(this@TableDataActivity, "BaÄŸlantÄ± hatasÄ±!", Toast.LENGTH_SHORT).show()
            }
        })
    }
    private fun setupTableHeader(columns: List<String>) {
        tableHeader.removeAllViews() // Ã–nce temizleyelim
        val tableRow = TableRow(this)
        tableRow.setBackgroundColor(Color.DKGRAY) // Arka plan rengi koyu gri yapÄ±ldÄ±.

        for (column in columns) {
            val textView = TextView(this).apply {
                text = column.uppercase()  // KÃ¼Ã§Ã¼kse bÃ¼yÃ¼k harfe Ã§evir.
                setPadding(16, 16, 16, 16)
                setTextColor(Color.WHITE)  // Beyaz yazÄ± rengi.
                setTypeface(null, Typeface.BOLD)
                textSize = 16f  // YazÄ±yÄ± bÃ¼yÃ¼ttÃ¼m.
                setBackgroundResource(R.drawable.table_header_bg) // KenarlÄ±k ekledim.
                gravity = Gravity.CENTER
                layoutParams = TableRow.LayoutParams(0, ViewGroup.LayoutParams.WRAP_CONTENT, 1f) // Esnek geniÅŸlik
            }
            tableRow.addView(textView)
        }

        tableHeader.addView(tableRow) // En Ã¼ste ekleyelim
    }

}


